'Motor A --> LEFT motor
'Motor D --> RIGHT motor

'Constants
color_sensor_mode = 0
motor_base_speed = 50

'Colour sensor variables
sensor_line_front = 1
sensor_line_side = 2
sensor_colour_left = 3
sensor_colour_right = 4

line_track_front = 0
line_track_side = 0

'Motor variables
left_motor_speed = 0
right_motor_speed = 0
motor_ports = "AD"

'PID GAINS
p_gain = 0
i_gain = 0
d_gain = 0

'PID variables
line_track_setpoint = 50
pid_i_mem = 0
pid_i_max = 0
pid_output = 0
pid_d_last_error = 0

'SETUP:
LCD.Clear()
LCD.Write(40, 40, "Startup!")

'Initialise colour sensors
Sensor.SetMode(1, color_sensor_mode)
Sensor.SetMode(2, color_sensor_mode)
Sensor.SetMode(3, color_sensor_mode)
Sensor.SetMode(4, color_sensor_mode)

LCD.Clear()
LCD.Write(40, 40, "Setup DONE!")
LCD.Write(40, 50, "Starting main program...")

' =====================================================
'====================== MAIN LOOP ======================
' =====================================================

While "True"
  initial_run_up() 'Move straight until the robot reaches the first black line
  turn_left() 'Turn left to collect temperature controllers
  
EndWhile

' =====================================================
'====================== MAIN LOOP ======================
' =====================================================

Sub initial_run_up
  has_reached_line = 0
  
  Motor.StartSync(motor_ports, motor_base_speed, motor_base_speed)
  
  While has_reached_line != 2
    line_track_front = Sensor.ReadPercent(sensor_line_front)
    line_track_side = Sensor.ReadPercent(sensor_line_side)
    
    If line_track_front <= 20 And has_reached_line == 0
      has_reached_line = 1
    EndIf
    
    If line_track_side <= 20 And has_reached_line == 1
      has_reached_line = 2
    EndIf
    
  EndWhile
  Motor.Stop(motor_ports, "True")
  
EndSub

Sub line_track
  pid_error = line_track_setpoint - Sensor.ReadPercent(1)
  pid_i_mem += i_gain * pid_error
  
  If (pid_i_mem > pid_i_max)
    pid_i_mem = pid_i_max
  ElseIf (pid_i_mem < pid_i_max * -1)
    pid_i_mem = pid_i_max * -1;
  EndIf
  
  pid_output = p_gain * pid_error + pid_i_mem + d_gain * (pid_error - pid_d_last_error)
  
  pid_d_last_error = pid_error 
    
  If pid_error > 0                                          'Robot is on the left side of the line
    left_motor_speed = motor_base_speed
    right_motor_speed  = motor_base_speed + pid_output
  Else                                                      'Robot is on the right side of the line instead
    left_motor_speed = motor_base_speed + pid_output
    right_motor_speed = motor_base_speed
  EndIf
  
  'Set motors for 100ms cycle before restarting the loop for next correction
  Motor.StartSync(motor_ports, left_motor_speed, right_motor_speed)
  Program.Delay(100)
  Motor.Stop(motor_ports, "True")
  
EndSub

Sub turn_right 'TODO: Try to eliminate this from the program
  Motor.StartSync(motor_ports, motor_base_speed, motor_base_speed * -1) 'TODO: Check the direction for turn
  
  While is_turn_complete != 2
    line_track_front = Sensor.ReadPercent(sensor_line_front)
    line_track_side = Sensor.ReadPercent(sensor_line_side)
    
    If line_track_side >= 50 And is_turn_complete == 0
      is_turn_complete = 1
    ElseIf line_track_front <= 20 And is_turn_complete == 1
     is_turn_complete = 2 
  EndWhile
  
  Motor.Stop(motor_ports, "True")
EndSub

Sub turn_left
  is_turn_complete = 0
  
  Motor.StartSync(motor_ports, motor_base_speed, motor_base_speed * -1) 'TODO: Check the direction for turn
  
  While is_turn_complete != 2
    line_track_front = Sensor.ReadPercent(sensor_line_front)
    line_track_side = Sensor.ReadPercent(sensor_line_side)
    
    If line_track_side >= 50 And is_turn_complete == 0
      is_turn_complete = 1
    ElseIf line_track_front <= 20 And is_turn_complete == 1
     is_turn_complete = 2 
  EndWhile
  
  Motor.Stop(motor_ports, "True")
EndSub