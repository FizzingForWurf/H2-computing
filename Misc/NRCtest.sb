'Motor A --> LEFT motor
'Motor D --> RIGHT motor

'Constants
color_sensor_mode = 0
motor_base_speed = 50

'Colour sensor variables
sensor_line_front = 1
sensor_line_side = 2
sensor_colour_left = 3
sensor_colour_right = 4

line_track_front = 0
line_track_side = 0

'Motor variables
left_motor_speed = 0
right_motor_speed = 0
motor_ports = "AD"
turn_direction = ""

'PID GAINS
p_gain = 0
i_gain = 0
d_gain = 0

'PID variables
line_track_setpoint = 50
pid_i_mem = 0
pid_i_max = 0
pid_output = 0
pid_d_last_error = 0

'SETUP:
LCD.Clear()
LCD.Write(40, 40, "Startup!")

'Initialise colour sensors
Sensor.SetMode(1, color_sensor_mode)
Sensor.SetMode(2, color_sensor_mode)
Sensor.SetMode(3, color_sensor_mode)
Sensor.SetMode(4, color_sensor_mode)

LCD.Clear()
LCD.Write(40, 40, "Setup DONE!")
LCD.Write(40, 50, "Starting main program...")

' =====================================================
'====================== MAIN LOOP ======================
' =====================================================

While "True"
  initial_run_up() 'Move straight until the robot reaches the first black line
  
  turn_direction = "L" 'Turn left to collect temperature controllers
  turn() 
  
  line_track()
  
EndWhile

' =====================================================
'====================== MAIN LOOP ======================
' =====================================================

Sub initial_run_up
  has_reached_line = 0
  
  Motor.StartSync(motor_ports, motor_base_speed, motor_base_speed)
  
  While has_reached_line <> 2
    line_track_front = Sensor.ReadPercent(sensor_line_front)
    line_track_side = Sensor.ReadPercent(sensor_line_side)
    
    If line_track_front <= 20 And has_reached_line = 0 Then
      has_reached_line = 1
    EndIf
    
    If line_track_side <= 20 And has_reached_line = 1 Then
      has_reached_line = 2
    EndIf
    
  EndWhile
  Motor.Stop(motor_ports, "True")
  
EndSub

'=====================================================================================

Sub turn 
  is_turn_complete = 0
  
  If turn_direction = "L" Then
    Motor.StartSync(motor_ports, motor_base_speed, motor_base_speed * -1) 'TODO: Check the direction for turn
  ElseIf turn_direction = "R" Then
    Motor.StartSync(motor_ports, motor_base_speed * -1, motor_base_speed) 'TODO: Check the direction for turn
  EndIf
  
  While is_turn_complete <> 2
    line_track_front = Sensor.ReadPercent(sensor_line_front)
    line_track_side = Sensor.ReadPercent(sensor_line_side)
    
    LCD.Clear() 'For debugging
    LCD.Write(40, 40, line_track_front)
    LCD.Write(40, 60, line_track_side)
      
    If line_track_side >= 50 And is_turn_complete = 0 Then
      is_turn_complete = 1
    EndIf
      
    If line_track_front <= 20 And is_turn_complete = 1 Then
      is_turn_complete = 2 
    EndIf
  
  EndWhile

  Motor.Stop(motor_ports, "True")
  
EndSub

'=====================================================================================

Sub line_track
  end_point = 0
  motor_delay = 100 'ms

  While end_point <> 2
    pid_error = line_track_setpoint - Sensor.ReadPercent(sensor_line_front)
    pid_i_mem = pid_i_mem + i_gain * pid_error
    
    If pid_i_mem > pid_i_max Then
      pid_i_mem = pid_i_max
    ElseIf pid_i_mem < (pid_i_max * -1) Then
      pid_i_mem = pid_i_max * -1
    EndIf
    
    pid_output = p_gain * pid_error + pid_i_mem + d_gain * (pid_error - pid_d_last_error)
    
    pid_d_last_error = pid_error 
      
    If pid_error > 0 Then                                         'Robot is on the left side of the line
      left_motor_speed = motor_base_speed
      right_motor_speed  = motor_base_speed + pid_output
    Else                                                      'Robot is on the right side of the line instead
      left_motor_speed = motor_base_speed + pid_output
      right_motor_speed = motor_base_speed
    EndIf
    
    'Set motors for 100ms cycle before restarting the loop for next correction
    Motor.StartSync(motor_ports, left_motor_speed, right_motor_speed)
    Program.Delay(motor_delay)
    Motor.Stop(motor_ports, "True")
  
  EndWhile

EndSub
